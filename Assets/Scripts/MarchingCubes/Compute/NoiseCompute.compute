#pragma kernel GenerateNoise

#include "Includes/FastNoiseLite.compute"

static const uint numThreads = 8;

RWStructuredBuffer<float> _Weights;

int _ChunkSize;

// Noise Controles
float _Amplitude;
float _Frequency;
float _GroundPercent;
int   _Octaves;

int indexFromCoord(int x, int y, int z)
{
	return x + numThreads * (y + numThreads * z);
}

[numthreads(numThreads,numThreads,numThreads)]
void GenerateNoise (uint3 id : SV_DispatchThreadID)
{
	fnl_state noise = fnlCreateState();

	noise.noise_type = FNL_NOISE_OPENSIMPLEX2;
	noise.fractal_type = FNL_FRACTAL_RIDGED;
	noise.frequency = _Frequency;
	noise.octaves = _Octaves;

	float3 pos = id;
	float  ground = -pos.y + (_GroundPercent * _ChunkSize);
	float  n = ground + fnlGetNoise3D(noise, pos.x, pos.y, pos.z) * _Amplitude;

	_Weights[indexFromCoord(id.x, id.y, id.z)] = n;
}
