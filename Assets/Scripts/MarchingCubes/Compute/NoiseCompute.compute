#pragma kernel GenerateNoise

#include "Includes/FastNoiseLite.compute"

RWStructuredBuffer<float> _Weights;
static const int numThreads = 8;

// Noise Controles
float _Frequency;
float _Lacunarity;
float _Gain;
float _WeightedStrength;
int   _Octaves;
int   _NoiseType;
int   _FractalType;


float _GroundPosition;
float _WallsWeight;
float _GroundPercent;
float _Amplitude;
bool  _Walls;
uint  _ChunkSize;


int indexFromCoord(int x, int y, int z)
{
	return x + _ChunkSize * (y + _ChunkSize * z);
}

[numthreads(numThreads,numThreads,numThreads)]
void GenerateNoise (uint3 id : SV_DispatchThreadID)
{
	fnl_state noise = fnlCreateState();

	noise.noise_type = _NoiseType;
	noise.fractal_type = _FractalType;
	noise.frequency = _Frequency;
	noise.octaves = _Octaves;
	noise.lacunarity = _Lacunarity;
	noise.gain = _Gain;
	noise.weighted_strength = _WeightedStrength;


	float3 pos = id;
	float  ground = -pos.y + (_GroundPercent * _ChunkSize);
	float  n = ground + fnlGetNoise3D(noise, pos.x, pos.y, pos.z) * _Amplitude;

	if(pos.y < _GroundPosition)
	{
		n += _WallsWeight;
	}

	if(_Walls)
	{
		
	}

	_Weights[indexFromCoord(id.x, id.y, id.z)] = n;
}
